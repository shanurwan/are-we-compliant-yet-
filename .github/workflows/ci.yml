name: bnm-iac-ci

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      run_apply:
        description: 'Run Terraform Apply (manual opt-in)'
        type: boolean
        default: false
      environment:
        description: 'Environment for apply'
        type: environment
        required: false
        default: production

permissions:
  contents: read
  id-token: write   # for AWS OIDC
  actions: read

env:
  TF_WORKING_DIR: demo/terraform
  PLAN_JSON: demo/terraform/policy_inputs/plan.json

jobs:
  fmt_validate:
    name: Terraform fmt & validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform fmt/validate (no cloud calls)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform fmt -check
          terraform init -input=false
          terraform validate

  plan:
    name: Terraform plan (read-only)
    runs-on: ubuntu-latest
    needs: fmt_validate
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (read-only, plan only)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_READONLY }}
          aws-region: ${{ secrets.AWS_REGION }}

          #for debugging
      - name: Who am I?
        run: aws sts get-caller-identity

      - name: Show ref & repo (debug)
        run: |
          echo "ref=${{ github.ref }}"
          echo "repository=${{ github.repository }}"

      - name: Terraform Init
        working-directory: environments/dev
        run: terraform init -input=false

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Terraform plan â†’ plan.json
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          mkdir -p policy_inputs
          terraform init -input=false
          terraform plan -out=tfplan -var="db_password=$(openssl rand -base64 12)"
          terraform show -json tfplan > policy_inputs/plan.json

      - name: Upload plan.json artifact
        uses: actions/upload-artifact@v4
        with:
          name: tf-plan-json
          path: ${{ env.PLAN_JSON }}

  checkov:
    name: Checkov (HCL & plan-aware)
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4

      - name: Download plan.json
        uses: actions/download-artifact@v4
        with:
          name: tf-plan-json
          path: demo/terraform/policy_inputs

      - name: Install Checkov
        run: pipx install checkov

      - name: Checkov HCL scan
        run: checkov -d ${{ env.TF_WORKING_DIR }} -o json > checkov_hcl.json

      - name: Checkov plan scan
        run: checkov -f ${{ env.PLAN_JSON }} --framework terraform_plan -o json > checkov_plan.json

      - name: Upload Checkov results
        uses: actions/upload-artifact@v4
        with:
          name: checkov-results
          path: |
            checkov_hcl.json
            checkov_plan.json

  opa:
    name: OPA (policy-as-code gate)
    runs-on: ubuntu-latest
    needs: plan
    steps:
      - uses: actions/checkout@v4

      - name: Download plan.json
        uses: actions/download-artifact@v4
        with:
          name: tf-plan-json
          path: demo/terraform/policy_inputs

      - name: Install OPA
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa && sudo mv opa /usr/local/bin/opa

      - name: Run OPA (fail on deny)
        run: |
          opa eval --format pretty \
            --fail-defined \
            --input ${{ env.PLAN_JSON }} \
            --data policies 'data.terraform.policy.deny' | tee opa_output.txt

      - name: Upload OPA output
        uses: actions/upload-artifact@v4
        with:
          name: opa-output
          path: opa_output.txt

  report:
    name: Generate HTML compliance report
    runs-on: ubuntu-latest
    needs: [checkov, opa]
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: tf-plan-json
          path: demo/terraform/policy_inputs
      - uses: actions/download-artifact@v4
        with:
          name: checkov-results
          path: .
      - uses: actions/download-artifact@v4
        with:
          name: opa-output
          path: .

      - name: Build report.html
        run: |
          mkdir -p compliance/reports
          {
            echo '<!doctype html><html><head><meta charset="utf-8"><title>BNM IaC Compliance Report</title><style>body{font-family:system-ui,Arial;margin:24px} pre{background:#f6f8fa;padding:12px;border-radius:8px;overflow:auto}</style></head><body>';
            echo '<h1>BNM IaC Compliance Report</h1>';
            echo "<p><strong>Generated:</strong> $(date -Is)</p>";
            echo '<h2>Terraform Plan (JSON)</h2><pre>'; sed 's/&/\&amp;/g; s/</\&lt;/g' demo/terraform/policy_inputs/plan.json | head -n 200; echo '</pre>';
            echo '<h2>OPA Policy Evaluation</h2><pre>'; sed 's/&/\&amp;/g; s/</\&lt;/g' opa_output.txt; echo '</pre>';
            echo '<h2>Checkov (HCL)</h2><pre>'; sed 's/&/\&amp;/g; s/</\&lt;/g' checkov_hcl.json | head -n 200; echo '</pre>';
            echo '<h2>Checkov (Plan)</h2><pre>'; sed 's/&/\&amp;/g; s/</\&lt;/g' checkov_plan.json | head -n 200; echo '</pre>';
            echo '</body></html>';
          } > compliance/reports/compliance_report.html

      - name: Upload compliance report
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance/reports/compliance_report.html

  apply:
    name: Terraform Apply (manual opt-in)
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' && inputs.run_apply }}
    needs: [plan, checkov, opa]
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS (writer role)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_APPLY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Apply (requires env approval; not run by default)
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init -input=false
          terraform apply -auto-approve -var="db_password=$(openssl rand -base64 12)"
